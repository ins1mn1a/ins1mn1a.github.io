<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis 主从哨兵脑裂</title>
      <link href="/2021/12/16/redis/Redis%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/16/redis/Redis%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E8%84%91%E8%A3%82%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><p>读和写以及备份操作都是在一台Redis服务器上进行的，那么随着项目访问量的增加，对Redis服务器的操作也越加频繁，虽然Redis读写速度都很快，但是一定程度上也会造成一定的延时，那么为了解决访问量大的问题（大概有80%的请求都是读请求），通常会采取的一种方式是主从架构Master/Slave，Master 以写为主，Slave 以读为主，Master 主节点更新后根据配置，自动同步到从机Slave 节点。</p><p>主从复制之后，<strong>主服务器用来处理写请求，而从服务器只能用于读，不能写</strong>。最简单一主二从的方式，也可以采用一主多从的或者级联结构，Redis主从复制又可以分为全量复制和增量复制。</p><p>主从复制一主多从：</p><ul><li><p>这样的问题就是，如果Master服务器宕机了，那么两个从服务器便没有了主人一样，这时候我们只能去重新启动master，或者说在剩下的从服务器中选一个作为主服务器，然后进行将剩下的从服务器手动的连接到新master，这样就显得并不智能。显然，这非常的麻烦，大型的项目从服务器可能会有很多。</p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121200823820.png" alt="image-20211121200823820"></p></li></ul><p>主从复制链路形式：</p><ul><li>这种模式也有上述的问题，Master6379宕机之后，Slave6380并不会摇身一变成为matser，它仍然是一个salve。</li></ul><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121194755383.png" alt="image-20211121194755383"></p><h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><p>Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。</p><ul><li>从服务器连接主服务器，发送sync命令；</li><li>主服务器接收到sync命令，开始执行bgsave命令生成rdb文件，并使用缓冲区记录此后执行的所有写命令</li><li>主服务器bgsave命令执行完成后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令</li><li>从服务器收到快照文件后丢弃所有旧数据，载入收到的快照</li><li>主服务器快照发送完毕后开始向服务器发送缓冲区中的写命令</li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令</li></ul><p>至此，从服务器数据初始化的所有操作完成，从服务器此时可以接收来自用户的读请求，但是不能写。</p><h3 id="增量复制"><a href="#增量复制" class="headerlink" title="增量复制"></a>增量复制</h3><p>Redis<strong>增量复制</strong>是指<strong>Slave初始化后开始正常工作时，主服务器发生的写操作同步到从服务器的过程。</strong></p><p>增量复制的过程主要是<strong>主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行写命令</strong>。</p><h1 id="主从复制模拟"><a href="#主从复制模拟" class="headerlink" title="主从复制模拟"></a>主从复制模拟</h1><p>这里用3个不同的端口，生成3个redis服务器，并且准备用6379端口设置为主机，6380和6381设置为从机。</p><p>主从复制，配置从节点不配置主节点</p><h3 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h3><ol><li>拷贝redis.conf文件</li></ol><p>这里拷贝3份配置文件redis.conf，1一个主，2个从</p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121190849226.png" alt="image-20211121190849226"></p><ol start="2"><li><p>修改配置文件</p><ul><li>redis.conf中的端口号</li></ul><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121185306902.png" alt="image-20211121185306902"></p><ul><li>daemonize 设置为yes</li></ul><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121185315718.png" alt="image-20211121185315718"></p><ul><li>进程id pid</li></ul><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121185322334.png" alt="image-20211121185322334"></p><ul><li>日志</li></ul><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121185331341.png" alt="image-20211121185331341"></p><ul><li>dump.rdb</li></ul><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121185345459.png" alt="image-20211121185345459"></p><ul><li>如果redis设置了密码，那么需要在从机上设置主机的密码</li></ul><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121185439977.png" alt="image-20211121185439977"></p></li><li><p>分别启动三个端口的redis-server和redis-cli</p></li><li><p>将端口6380、6381设置为6379的从机</p><ul><li><p><code>slave ip port</code>设置为Ip+port主机的从机</p></li><li><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121191420316.png"></p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121191440436-16374932859391.png" alt="image-20211121191440436"></p></li><li><p><code>info replication</code>查看当6380和6381服务器的状态</p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121191544255.png" alt="image-20211121191544255"></p></li><li><p>6379主机查看服务器状态</p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121191650650.png" alt="image-20211121191650650"></p></li></ul></li></ol><p>我们上述的配置是通过命令配置的，如果在配置文件中进行配置，那么则是永久的配置。</p><p>配置文件中进行的配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置主服务器IP 端口</span></span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"><span class="comment"># redis设置了密码的话 还需要配置主服务器的密码</span></span><br><span class="line">masterauth &lt;master-password&gt;</span><br></pre></td></tr></table></figure><p>这种命令配置的主从，当主机关闭后，重启，它仍然会是两个从机的主机，从机依旧可以直接获取到主机写的信息！如果我们将主机关闭后，让从机比如6380成为。但是，当从机关闭，重启，这个从机就不再是之前它master的slave了，现在重启后，它自己就是一个master，跟之前的master就没关系了。</p><p>如果Master宕机了，如果要让slave中的一个成为master，在哨兵模式没有设置的情况下，执行命令<code>slaveof no one</code>，那么这个结点就成为了master，然后其他的slave就可以再手动连接到新手动设置的master了。</p><h3 id="链路形式"><a href="#链路形式" class="headerlink" title="链路形式"></a>链路形式</h3><p>这里将6379作为master，然后6380连接到6381上。</p><p>现在将6379master断掉，然后在6381上info replication，发现它并不会成为master。</p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121195727429.png" alt="image-20211121195727429"></p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121195757090.png" alt="image-20211121195757090"></p><p>主从模式没办法对master进行自动的更新。因此引入了哨兵模式Sentinel。</p><p>从master到slave的复制是异步的，所以可能有部分数据还没复制到slave，master宕机，由此数据就部分丢失了，这就是<strong>Redis异步复制导致的数据丢失问题。</strong></p><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>上面的模式，如果Master宕机了那么就类似群龙无首一样，多个slave中没有一个站出来自动充当master，如果我们手动选择就太繁琐了，引入的哨兵模式就可以解决这种问题。</p><h3 id="哨兵模式的作用"><a href="#哨兵模式的作用" class="headerlink" title="哨兵模式的作用"></a>哨兵模式的作用</h3><ol><li><strong>监控(Monitoring):</strong> 哨兵(sentinel) 会不断地检查你的Master和Slave是否运作正常。</li><li><strong>提醒(Notification):</strong> 当被监控的某个Redis节点出现问题时， 哨兵(sentinel) 可以通过 API 向管理员或者其他应用程序发送通知。</li><li><strong>主节点故障转移(Automatic failover)<strong>：当</strong>一个Master不能正常工作</strong>时，哨兵(sentinel) 会开始<strong>一次自动故障迁移操作</strong>。从节点晋升到主节点并维护后续正确的主从关系；</li></ol><h3 id="哨兵进程的工作方式"><a href="#哨兵进程的工作方式" class="headerlink" title="哨兵进程的工作方式"></a>哨兵进程的工作方式</h3><p>Sentinel（哨兵）是Redis的高可用性解决方案：由一个或者多个哨兵实例组成的哨兵系统来监视多个服务器的运行状态。</p><p>当一个master主服务器宕机的时候，如果有一个哨兵检测到这个主机处于下线状态，这时候这个主机被认为是<strong>主观下线</strong>（SDOWN），然后当一定数量的哨兵都检测到这个主服务器下线时，这个主机被认为<strong>客观下线</strong>（ODOWN），并在确定主服务器进入<strong>客观下线</strong>的状态之后，哨兵自动投票选举从服务器中的一个成为主服务器，剩下的所有从服务器都会自动的连接到这个新选取出来的主服务器。</p><ol><li>每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的Master主服务器，Slave从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。</li><li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值，则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）。</li><li>如果一个Master主服务器被标记为主观下线（SDOWN），则正在监视这个Master主服务器的所有Sentinel（哨兵）进程要以每秒一次的频率确认Master主服务器的确进入了主观下线状态。</li><li>当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认Master主服务器进入了主观下线状态（SDOWN）， 则Master主服务器会被标记为客观下线（ODOWN）。</li><li>在一般情况下， 每个Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有Master主服务器、Slave从服务器发送 INFO 命令。</li><li>当Master主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master主服务器的所有 Slave从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</li><li>若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master主服务器的客观下线状态就会被移除。若 Master主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</li></ol><h3 id="哨兵模式模拟"><a href="#哨兵模式模拟" class="headerlink" title="哨兵模式模拟"></a>哨兵模式模拟</h3><h4 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h4><p>新建一个哨兵模式配置文件<code>sentinel.conf</code>，这里设置同意主节点真的挂掉的哨兵数量为1。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称 host port 同意主节点真的挂掉的哨兵数量</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6381 1</span><br></pre></td></tr></table></figure><h4 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h4><p><code>redis-sentinel sentinel.conf</code>启动哨兵</p><p>第一次启动哨兵：Next failover delay: I will not start a failover before Sun Nov 21 20:50:55 2021</p><p>这是因为在redis主从服务器中设置了密码，但是哨兵配置文件中并没有配置密码，所有没有成功启动哨兵模式。</p><p>重新配置如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 被监控的名称 host port 同意主节点真的挂掉的哨兵数量</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6381 1</span><br><span class="line">sentinel auth-pass myredis password <span class="comment"># 密码配置</span></span><br></pre></td></tr></table></figure><p>重新启动哨兵模式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># redis-sentinel myredisconfig/sentinel.conf</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.176 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.176 <span class="comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=8175, just started</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.176 <span class="comment"># Configuration loaded</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.177 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line">8175:X 21 Nov 2021 21:26:49.177 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ <span class="string">&#x27;&#x27;</span>-._</span><br><span class="line">      _.-``    `.  `_.  <span class="string">&#x27;&#x27;</span>-._           Redis 6.2.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">&#x27;&#x27;</span>-._</span><br><span class="line"> (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="string">&#x27;|     Port: 26379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 8175</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |           https://redis.io</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span>_.-<span class="string">&#x27;|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="string">&#x27;    |</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">      `-._    `-.__.-<span class="string">&#x27;    _.-&#x27;</span></span><br><span class="line">          `-._        _.-<span class="string">&#x27;</span></span><br><span class="line"><span class="string">              `-.__.-&#x27;</span></span><br><span class="line"></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.177 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.179 <span class="comment"># Sentinel ID is 16cbd6e88092909d2f92476c149045138facc8f1</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.179 <span class="comment"># +monitor master myredis 127.0.0.1 6381 quorum 1</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.180 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span><br><span class="line">8175:X 21 Nov 2021 21:26:49.181 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动成功，可以看到6381端口下有两个slave：</p><p>+slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381；</p><p>+slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381；</p><p>现在我们将主节点6381断掉，验证哨兵模式是否会重新选举主服务器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8175:X 21 Nov 2021 21:26:49.177 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.179 <span class="comment"># Sentinel ID is 16cbd6e88092909d2f92476c149045138facc8f1</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.179 <span class="comment"># +monitor master myredis 127.0.0.1 6381 quorum 1</span></span><br><span class="line">8175:X 21 Nov 2021 21:26:49.180 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span><br><span class="line">8175:X 21 Nov 2021 21:26:49.181 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381</span><br><span class="line">8175:X 21 Nov 2021 21:27:55.868 <span class="comment"># +sdown master myredis 127.0.0.1 6381</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:55.868 <span class="comment"># +odown master myredis 127.0.0.1 6381 #quorum 1/1</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:55.868 <span class="comment"># +new-epoch 1</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:55.868 <span class="comment"># +try-failover master myredis 127.0.0.1 6381</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:55.869 <span class="comment"># +vote-for-leader 16cbd6e88092909d2f92476c149045138facc8f1 1</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:55.869 <span class="comment"># +elected-leader master myredis 127.0.0.1 6381</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:55.869 <span class="comment"># +failover-state-select-slave master myredis 127.0.0.1 6381</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:55.931 <span class="comment"># +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:55.931 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span><br><span class="line">8175:X 21 Nov 2021 21:27:55.991 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span><br><span class="line">8175:X 21 Nov 2021 21:27:56.291 <span class="comment"># +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:56.291 <span class="comment"># +failover-state-reconf-slaves master myredis 127.0.0.1 6381</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:56.345 * +slave-reconf-sent slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381</span><br><span class="line">8175:X 21 Nov 2021 21:27:57.273 * +slave-reconf-inprog slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381</span><br><span class="line">8175:X 21 Nov 2021 21:27:57.273 * +slave-reconf-done slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381</span><br><span class="line">8175:X 21 Nov 2021 21:27:57.329 <span class="comment"># +failover-end master myredis 127.0.0.1 6381</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:57.329 <span class="comment"># +switch-master myredis 127.0.0.1 6381 127.0.0.1 6380</span></span><br><span class="line">8175:X 21 Nov 2021 21:27:57.329 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6380</span><br><span class="line">8175:X 21 Nov 2021 21:27:57.329 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span><br><span class="line">8175:X 21 Nov 2021 21:28:27.369 <span class="comment"># +sdown slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这里+表示进入，-表示退出</span><br><span class="line">+sdown就表示实例进入主观下线状态</span><br><span class="line"></span><br><span class="line">-sdown表示实例退出主观下线状态</span><br><span class="line"></span><br><span class="line">+odown表示实例进入客观下线状态</span><br><span class="line"></span><br><span class="line">-odown表示实例退出客观下线状态</span><br><span class="line"></span><br><span class="line">+swtich-master表示主服务器地址发生变化</span><br></pre></td></tr></table></figure><p>可以看到，确实是重新选举了一个master：+switch-master myredis 127.0.0.1 6381 127.0.0.1 6380；</p><p>现在6380成为了一个master，然后我们去查看6380的信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line">Error: Server closed the connection</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master<span class="comment"># 角色从slave变为master</span></span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6379,state=online,offset=5126,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:4f3894e2484b0ed7c7cf3ddb62805a4cd865e726</span><br><span class="line">master_replid2:c2a5af21553f6f3996fdfd68742d9a667960d9e5</span><br><span class="line">master_repl_offset:5126</span><br><span class="line">second_repl_offset:2408</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:5126</span><br></pre></td></tr></table></figure><p>可以看到现在6380的角色成为了master。</p><p>查看6379的信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line">Error: Server closed the connection</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380<span class="comment"># 主节点从6381变为了6380</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:5390</span><br><span class="line">slave_repl_offset:5390</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:4f3894e2484b0ed7c7cf3ddb62805a4cd865e726</span><br><span class="line">master_replid2:c2a5af21553f6f3996fdfd68742d9a667960d9e5</span><br><span class="line">master_repl_offset:5390</span><br><span class="line">second_repl_offset:2408</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15</span><br><span class="line">repl_backlog_histlen:5376</span><br></pre></td></tr></table></figure><h3 id="哨兵配置文件"><a href="#哨兵配置文件" class="headerlink" title="哨兵配置文件"></a>哨兵配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">  sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span></span><br><span class="line">这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><br><span class="line">可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span></span><br><span class="line"><span class="comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment">#3.当想要取消一个正在进行的failover所需要的时间。  </span></span><br><span class="line"><span class="comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment">#对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class="line"><span class="comment">#通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"> sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="哨兵集群"><a href="#哨兵集群" class="headerlink" title="哨兵集群"></a>哨兵集群</h3><p>当只有一个哨兵的时候，如果这个哨兵一不小心崩掉了，那么我们的主从模式就没有哨兵了，就无法完成自动选举主节点的功能了。所以我们可以给哨兵也做一个集群。</p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211121214930557.png" alt="image-20211121214930557"></p><p>根据端口不同配置多份哨兵的配置文件，然后启动redis-master，redis-slaves，哨兵。</p><h1 id="异步数据丢失"><a href="#异步数据丢失" class="headerlink" title="异步数据丢失"></a>异步数据丢失</h1><p>因为Redis从master到slave的复制是异步的，所以可能有部分数据还没复制到slave，master就宕机了，由此数据就部分丢失了，这就是<strong>Redis异步复制导致的数据丢失问题。</strong></p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211123224114132.png" alt="image-20211123224114132"></p><h1 id="脑裂"><a href="#脑裂" class="headerlink" title="脑裂"></a>脑裂</h1><p>Redis的一个master因为网络的波动，与其他slave失去了连接，但是master实际上还是在正常的运行。哨兵们就认为这个master挂掉了，于是哨兵就会选举出一个新的master。这个时候集群里就有两个master了，这就是<strong>脑裂。</strong></p><p>尽管这个时候某个slave已经被选举成为了master，但是可能客户端client还没来得及从旧的master切换到新的master，仍在继续写数据，就可能造成这仍向旧master写的部分数据丢失。</p><p>然后当原本的master携带数据重新连接回来的时候，哨兵让原master执行slaveof命令，和新master进行全量复制，当从服务器收到master的快照文件后丢弃所有旧数据，原master数据被清空，重新向新master复制数据。</p><p><img src="/../../img/markdown_img/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.assets/image-20211123224138254.png" alt="image-20211123224138254"></p><h1 id="脑裂以及异步数据丢失解决方案"><a href="#脑裂以及异步数据丢失解决方案" class="headerlink" title="脑裂以及异步数据丢失解决方案"></a>脑裂以及异步数据丢失解决方案</h1><p>Redis提供以下配置：</p><ul><li><p>min-slaves-to-write M</p><p>配置了master能进行数据同步的最少slave数量。</p></li><li><p>min-slaves-max-lag N</p><p>配置了master，slave进行数据复制时，slave给master发送ACK消息的最大延迟。</p></li></ul><p>我们可以把min-slaves-to-write和min-slaves-max-lag结合起来使用，分别设置一定阈值。</p><p>比如这里配置后要求：一个master至少要有M个slave，并且slave和master进行数据复制时的ACK消息不能超过N秒，否则，master就不能再接收client的请求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity过滤器原理</title>
      <link href="/2021/01/23/SpringSecurity/SpringSecurity%E8%BF%87%E6%BB%A4%E5%99%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2021/01/23/SpringSecurity/SpringSecurity%E8%BF%87%E6%BB%A4%E5%99%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity原理"><a href="#SpringSecurity原理" class="headerlink" title="SpringSecurity原理"></a>SpringSecurity原理</h1><h2 id="主要过滤器链"><a href="#主要过滤器链" class="headerlink" title="主要过滤器链"></a>主要过滤器链</h2><p>SpringSecurity的功能主要是由一系列的过滤器链相互配合完成的。验证一个过滤器之后放行到下一个过滤器链，然后到最后。</p><p><img src="/../../img/markdown_img/SpringSecurity%E8%BF%87%E6%BB%A4%E5%99%A8%E5%8E%9F%E7%90%86.assets/image-20211202145237010.png" alt="image-20211202145237010"></p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p><img src="/../../img/markdown_img/SpringSecurity%E8%BF%87%E6%BB%A4%E5%99%A8%E5%8E%9F%E7%90%86.assets/d359fe34bc7860c11a1b6e50bfd0e086.png" alt="img"></p><h3 id="过滤器作用"><a href="#过滤器作用" class="headerlink" title="过滤器作用"></a>过滤器作用</h3><ol><li><p>SecurityContextPersistenceFilter：会在每次请求处理之前从配置好的SecurityContextRepository中获取SecurityContext安全上下文信息，然后加载到SecurityContextHolder中，然后在该次请求处理完成之后，将SecurityContextHolder中关于这次请求的信息存储到一个“仓库”中，然后将SecurityContextHolder中的信息清除，例如在Session中维护一个用户的安全信息就是这个过滤器处理的。</p></li><li><p>DefaultLoginPageGeneratingFilter：如果没有配置自定义登录页面，那系统初始化时就会配置这个过滤器，并且用于在需要进行登录时生成一个登录表单页面。</p></li><li><p>BasicAuthenticationFilter：检测和处理http basic认证。</p></li><li><p>UsernamePasswordAuthenticationFilter：用于处理基于表单的登录请求，从表单中获取用户名和密码。默认情况下处理来自/login的表单action。从表单中获取用户名和密码时，默认使用的表单name属性值为username和password，这俩个值也可以通过usernameParameter和passwordParameter在配置中自定义。</p><p>这个过滤器在表单提交登录请求之时会起作用。那么假设现在采用SpringSecurity整合Jwt，那么我需要配置一个Jwt登录认证类（继承BasicAuthenticationFilter或者继承OncePerRequestFilter都可以，因为BasicAuthenticationFilter继承了OncePerRequestFilter），重写过滤器方法。Jwt的token认证登录是需要在<strong>在采用用户名密码登录认证之前</strong>，所以在配置Jwt登录认证类的时候需要在UsernamePasswordAuthenticationFilter之前添加过滤器。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置自定义过滤器 添加jwt登录授权过滤器</span></span><br><span class="line"><span class="comment">//在过滤器UsernamePasswordAuthenticationFilter之前</span></span><br><span class="line">http.addFilterBefore(jwtAuthenticationFilter,UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure></li><li><p>RequestCacheAwareFilter：用来处理请求的缓存。</p></li><li><p>SecurityContextHolderAwareRequestFilter：主要是包装请求对象request。</p></li><li><p>AnonymousAuthenticationFilter：检测SecurityContextHolder中是否存在Authentication对象，如果不存在则为其提供一个匿名Authentication。</p></li><li><p>SessionManagementFilter：管理Session的过滤器</p></li><li><p>ExceptionTranslationFilter：捕获来自过滤器链的所有异常，并进行处理。但是只处理两类异常：AccessDeniedException和AuthenticationException 异常，其他的异常会继续抛出。</p><p>如果捕获到的AuthenticationException，那么将会使用其对应的AuthenticationEntryPoint的commence()方法处理。在处理之前，ExceptionTranslationFilter先使用RequestCache将当前的HTTPServletRequest的信息保存起来，方便用户登录成功后可以跳转到之前的页面。</p><p>可以自定义AuthenticationException的处理方法。需要实现AuthenticationEntryPoint接口，然后重写commence()方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当未登录或者token失效时访问接口自定义的返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulAuthorizationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        RespBean bean = RespBean.error(<span class="string">&quot;请先登录!&quot;</span>);</span><br><span class="line">        bean.setCode(<span class="number">401</span>);</span><br><span class="line">        writer.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(bean));</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果捕获的AuthenticationDeniedException，那么将会根据当前访问的用户是否已经登录认证做不同的处理，如果未登录，则会使用关联的AuthenticationEntryPoint的commence()方法进行处理，否则将使用关联的AccessDeniedHandler的handle()方法进行处理。</p><p>可以进行自定义AuthenticationDeniedException的处理方法。需要实现AccessDeniedHandler接口，然后重写handle()方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        RespBean error = RespBean.error(<span class="string">&quot;权限不足，联系管理员!&quot;</span>);</span><br><span class="line">        writer.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(error));</span><br><span class="line">        error.setCode(<span class="number">403</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>FilterSecurityInterceptor：可以看做过滤器链的出口</p></li><li><p>RememberMeAuthenticationFilter：当用户没有登录而直接访问资源时, 从 cookie 里找出用户的信息, 如果 Spring Security 能够识别出用户提供的remember me cookie, 用户将不必填写用户名和密码, 而是直接登录进入系统，该过滤器默认不开启。</p></li></ol><h2 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h2><p>SecurityContext对象是安全上下文信息，包括当前使用系统的用户的信息。每个用户都会有它的安全上下文对象，所以把每一个用户的SecurityContext保存到SecurityContextHolder中。</p><p>SecurityContextHolder存储SecurityContext的方式根据应用场景不同也有区别：</p><p>（1）单机系统，即应用从开启到关闭的整个生命周期只有一个用户在使用。由于整个应用只需要保存一个SecurityContext（安全上下文即可）</p><p>（2）多用户系统，比如典型的Web系统，整个生命周期可能同时有多个用户在使用。这时候应用需要保存多个SecurityContext（安全上下文），需要利用ThreadLocal进行保存，每个线程都可以利用ThreadLocal获取其自己的SecurityContext，及安全上下文。ThreadLocal内部会用数组来存储多个对象的。原理是，ThreadLocal会为每个线程开辟一个存储区域，来存储相应的对象。</p><p>Authentication：用户信息的表示</p><p>在SecurityContextHolder中存储了当前与系统交互的用户的信息。Spring Security使用一个Authentication 对象来表示这些信息。</p><p>Authentication 主要包含了：</p><ul><li>用户权限集合</li><li>用户证书（密码）</li><li>细节（Details）</li><li>Principal（就是这个用户的账户信息）</li></ul><p>在自定义登录认证过滤器的时候，记得需要把用户的信息（Authentication ）保存到SecurityContextHolder中，以便后续用户的正常使用。比如我在做和Jwt认证的整合的时候，继承OncePerRequestFilter，重写doFilterInternal方法，认证完token之后，就需要把用户的信息存入安全上下文Holder中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UsernamePasswordAuthenticationToken authenticationToken</span><br><span class="line">    =<span class="keyword">new</span> UsernamePasswordAuthenticationToken(user,<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">authenticationToken.setDetails(<span class="keyword">new</span> WebAuthenticationDetailsSource()</span><br><span class="line">                               .buildDetails(request));</span><br><span class="line"></span><br><span class="line">SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br></pre></td></tr></table></figure><p>关于SecurityContextHolder大概就这样，有一些关于SecurityContextHolder具体的源码的细节可以参考一篇博客：</p><p><a href="https://www.cnblogs.com/longfurcat/p/9417912.html">https://www.cnblogs.com/longfurcat/p/9417912.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
